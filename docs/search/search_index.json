{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":""},{"location":"#what-is-this","title":"What is this?","text":"<p>pyControl D-series breakout is a device that connects a pyboard D-series microcontroller  with twelve RJ45 ports.  It is intended for use with the pyControl behavioral experiment control framework.</p>"},{"location":"#how-is-it-different","title":"How is it different?","text":"pyControl Breakout Board 1.2 (left) and D-series Breakout (right) <p>The core distinction between this breakout board and the official pyControl breakout board 1.2 is the upgrade to a newer generation pyboard (i.e. a more powerful microcontroller).  Some benefits of the newer pyboard include being smaller, faster, having more memory, and having more input/output pins. Having more available pins is particularly useful, as it enables the breakout board to provide more behavior ports without requiring a port expander.  Below is a comparison of the two breakout boards.</p> Breakout Board 1.2 D-series Breakout Board 1.6 Microcontroller Board pyboard v1.1 pyboard D-series SF6W CPU 168 MHz Cortex-M4F 216 MHz Cortex-M7F RAM 192 KB 512 KB ROM 512 KB 4,048 KB Connectors RJ45 6 12 BNC 4 0 USB Full Speed (12 Mbit/s) High Speed (480 Mbit/s) Behavior Ports Power Driver Pins 14 24 Digital I/O Pins 14 30 ADC Pins 12 15 DAC Pins 2 2 UART Buses 3 4 I2C Buses 2 2 Dimensions PCB 1.8 in x 7.6 in 2.7 in x 3.6 in Performance1 Latency - No load 561 \u00b1 16 \u00b5s (100% &lt; 1 ms) 307 \u00b1 9 \u00b5s (100% &lt; 1 ms) Latency - High load 842 \u00b1 293 \u00b5s (84.8% &lt; 1 ms) 372 \u00b1 95 \u00b5s (100% &lt; 1 ms) Accuracy - No load -210 \u00b1 281 \u00b5s (100% &lt; 1 ms) -342 \u00b1 285 \u00b5s (100% &lt; 1 ms) Accuracy - High load -27 \u00b1 351 \u00b5s (99.2% &lt; 1 ms) -361 \u00b1 280 \u00b5s (100% &lt; 1 ms) <p> </p> <ol> <li> <p>More details about the performance comparison here.\u00a0\u21a9</p> </li> </ol>"},{"location":"building/","title":"Building","text":""},{"location":"building/#printed-circuit-board","title":"Printed Circuit Board","text":"layoutschematic <p> dseries_breakout_gerber.zip</p> <p>Order PCB from OSH Park</p>"},{"location":"building/#bill-of-materials","title":"Bill of Materials","text":"<p>View interactive BOM</p> Qty Reference Description Value/MPN 2 C1, C2 1206 Capacitor 10\u00b5F 1 D1 Schottky Diode MBR120VLSFT3G 1 J1 Micro USB Socket 10118194-0001LF 1 J2 12-port RJ45 Connector 5569263-1 1 J3 Barrel Jack Connector PJ-037A 1 S1 Large Tactile Switch TL3300DF160Q 1 S2 Small Tactile Switch B3FS-1010P 1 U2 5V DC to DC Converter R-78E5.0-1.0 3 U3, U4, U5 8-channel Driver Array TBD62083A 2 X1U1, X2U1 40-pin Connector DF40HC(4.0)-40DS-0.4V(70)"},{"location":"further/","title":"Further Resources","text":""},{"location":"further/#pycontrol","title":"pyControl","text":"<ul> <li>Official pyControl documentation </li> <li>pyControl Google groups forum </li> <li>pyControl on GitHub </li> <li>Purchase ready to use pyControl hardware at the Open Ephys Store or Labmaker</li> </ul>"},{"location":"further/#micropython-and-pyboard-d-series","title":"MicroPython and Pyboard D-series","text":"<ul> <li>MicroPython Documentation </li> <li>MicroPython Store </li> <li>Pyboard D-series Documentation </li> </ul>"},{"location":"further/#karpova-lab","title":"Karpova Lab","text":"<ul> <li>Lab website</li> <li>D-series breakout repository</li> <li>More open hardware repositories<ul> <li>Cerebro</li> <li>Lever</li> <li>Syringe Pump</li> <li>Nosepoke</li> </ul> </li> </ul>"},{"location":"using/","title":"Using","text":""},{"location":"using/#what-to-get","title":"What To Get","text":"Qty Description Order Link Required 1 D-series Breakout Board Build your own Yes 1 pyboard D-series Microcontroller Micropython Yes 1 12V DC Power Supply Digi-Key Yes 1 USB cable Digi-Key Yes 1 DIN Rail Digi-Key 2 DIN Rail Adapter Digi-Key 4 M3 screws Digi-Key"},{"location":"using/#first-time-setup","title":"First Time Setup","text":"<p>Important HS USB setup</p> <p>The breakout board is designed to use the pyboard's high speed USB interface. To ensure the correct usb mode is being used, we make a change to the <code>boot.py</code> file.</p> <ol> <li>Plug the bare pyboard D-series into your computer.  </li> <li>It should appear as a flash drive on your computer. Edit the <code>boot.py</code> file to have the following: <pre><code>import pyb\npyb.usb_mode('VCP',port=1)\n</code></pre></li> </ol> <p>This change to <code>boot.py</code> is required, otherwise the pyboard won't be found by the pyControl software when it is connected through the breakout board! </p> <p>You are now ready to connect to the D-series Breakout board.</p> <ol> <li>Plug the pyboard onto the breakout board</li> <li>Plug 12V DC power into the breakout board</li> <li>Connect the breakout board to your computer with the USB </li> </ol>"},{"location":"using/#connecting-peripheral-devices","title":"Connecting Peripheral Devices","text":"<p>Refer to the table below when considering where to plug in devices. Fill up the top row first with standard devices that just need inputs or outputs. Use the second row for devices that require special communication (UART or I2C).</p> Note on interrupts <p>The pyboard microcontroller is limited to 16 separate interrupt vectors.  All of the DIO pins on the top row of the breakout board (Ports 1-6) are on separate interrupt vectors, so if you have a lot of input devices, plug them into the top row where there is a guarantee of no interrupt vector collisions.</p> Note on SPI <p>If you need to connect to a peripheral using SPI, take a look at Micropython's machine.SoftSPI</p> <p>The hardware SPI pins are unfortunately not grouped together on a single RJ45 jack on this breakout board, but instead are split up among multiple ports.  If you absolutely need to access the hardware SPI pins, you can plug in multiple port adapters to expose the pins. </p> <p>The following table desribes  hardware SPI pin mapping.</p> <p> SPI functionCPU namePin nameother pin nameD-series breakout  portport functionSPI(1)SCKA5x6W68CMISOA6x7W104AMOSIA7x8W149BSPI(2)SCKB13y6W492CMISOC2y7W531AMOSIC3y8W571B https://store.micropython.org/media/products/PYBD_SF2_W4F2_ds2.jpg https://store.micropython.org/media/products/WBUS_DIP68_ds1.jpg</p> <p> </p>"},{"location":"using/#example-task","title":"Example Task","text":"<p>The following instructions will enable you to run the <code>hardware_test.py</code> task file that comes with pyControl. The task uses 3 nosepokes plugged into ports 1-3 and a houselight plugged into port 4.</p> <ol> <li>Download the latest version of pyControl</li> <li>Download  breakout_dseries_1_6.py and place it in the <code>devices\\</code> directory</li> <li>Download  new_hardware_definition.py and place it in the <code>config\\</code> directory  <pre><code>.\n\u2514\u2500 pyControl\n   \u251c config\n   \u2502  \u2514\u2500 new_hardware_definition.py\n   \u2514\u2500 devices\n      \u2514\u2500 breakout_dseries_1_6.py\n</code></pre></li> <li>Launch pyControl and press the \"Connect\" button to connect to the breakout board.</li> <li>Press the \"Config\" button and the \"Load framework\" button. </li> <li>Again, press the \"Config\" button. Press the \"Load hardware definition\" button and then select \"new_hardware_definition.py\" to upload.</li> <li>If successful, you should get a couple OK's confirming that the framework and hardware definition have been transferred. </li> <li>From the task dropdown, select \"examples/hardware_test\", then click \"Upload\".</li> <li>Click \"Start\". The houselight should turn on and nosepokes will now respond to pokes. </li> </ol>"}]}